diff --git a/src/DaqComponent/DaqComponentBase.h b/src/DaqComponent/DaqComponentBase.h
index 6a0d077..c47d2d3 100755
--- a/src/DaqComponent/DaqComponentBase.h
+++ b/src/DaqComponent/DaqComponentBase.h
@@ -73,7 +73,7 @@ namespace DAQMW
               m_isTimerAlarm(false),
               m_has_printed_error_log(false),
               m_debug(false),
-			  m_time(true)
+			  m_time(false)
         {
             // status_timer = new Timer(STATUS_CYCLE_SEC);
         }
@@ -581,10 +581,10 @@ namespace DAQMW
                 }
                 set_done();
 
-                if (m_time) {
+                // if (m_time) {
                     // get_time_inline(m_command);
-                    get_time_output(m_command);
-                }
+                    // get_time_output(m_command);
+                // }
             }
             else {
                 ///same command as previous, stay same state, do same action
@@ -674,9 +674,6 @@ namespace DAQMW
         std::unique_ptr<Timer> status_timer{new Timer(STATUS_CYCLE_SEC)};
         std::unique_ptr<Timer> hb_timer{new Timer(CHECK_HB_CYCLE_SEC)};
 
-        // Heart beat
-        HBMSG m_hb;
-
         DAQCommand m_command;
         DAQLifeCycleState m_state;
         DAQLifeCycleState m_state_prev;
@@ -774,21 +771,21 @@ namespace DAQMW
         int get_hb_from_operator_clockwork()
         {
             if (hb_timer->checkTimer()) {
+                HBMSG m_hb = ZERO;
                 m_hb = m_daq_service0.getHB();
-                // if (m_hb == ONE) {
-                    // set_hb_done();
-                // }
-                // if (m_hb == END) {
-                //     if (m_state_prev == CONFIGURED && m_state == RUNNING) {
-                //         transAction(CMD_STOP);
-                //     }
-                //     std::cerr << "### shutdonw\n";
-                //     _exit(1);
-                // }
-                hb_timer->resetTimer();
-            }
-            if (m_hb) {
                 std::cerr << "m_hb=" << m_hb << std::endl;
+                if (m_hb == ONE) {
+                    m_daq_service0.upHB();
+                }
+                if (m_hb == END) {
+                    if (m_state_prev == CONFIGURED && m_state == RUNNING) {
+                        transAction(CMD_STOP);
+                    }
+                    sleep(0);
+                    std::cerr << "### Shutdonw\n";
+                    std::exit(1);
+                }
+                hb_timer->resetTimer();
             }
             return 0;
         }
diff --git a/src/DaqComponent/idl/DAQService.idl b/src/DaqComponent/idl/DAQService.idl
index dee0505..d09f1b1 100644
--- a/src/DaqComponent/idl/DAQService.idl
+++ b/src/DaqComponent/idl/DAQService.idl
@@ -75,7 +75,8 @@ struct Status
 
 enum HBMSG {
     ZERO,
-    ONE
+    ONE,
+    END
 };
 
 enum HeartBeatDone {
@@ -103,26 +104,14 @@ interface DAQService
     long getRunNo();
     void setFatalStatus(in FatalErrorStatus fatalStatus);
     FatalErrorStatus getFatalStatus();
-
-    RTC::ReturnCode_t setHB(in HBMSG hbs);
+    void setHB();
     HBMSG getHB();
+    void upHB();
+
     //void setStopDaqSystem();
     //HeartBeatDone hb_checkDone();
     //void   hb_setDone();
 
     // RTC::ReturnCode_t setTime(in TimeVal now);
     // TimeVal getTime();
-};
-
-/*
-module BiDirPolicy {
-    typedef unsigned short BidirectionalPolicyValue;
-    const BidirectionalPolicyValue NORMAL = 0;
-    const BidirectionalPolicyValue BOTH = 1;
-    const CORBA::PolicyType BIDIRECTIONAL_POLICY_TYPE = 37;
-
-    interface BidirectionalPolicy : CORBA::Policy {
-        readonly attribute BidirectionalPolicyValue value;
-    };
-};
-*/
\ No newline at end of file
+};
\ No newline at end of file
diff --git a/src/DaqComponent/idl/DAQServiceSVC_impl.cpp b/src/DaqComponent/idl/DAQServiceSVC_impl.cpp
index 3e1c51e..0648d92 100644
--- a/src/DaqComponent/idl/DAQServiceSVC_impl.cpp
+++ b/src/DaqComponent/idl/DAQServiceSVC_impl.cpp
@@ -24,6 +24,7 @@ DAQServiceSVC_impl::DAQServiceSVC_impl()
       m_done(DONE),
       m_state(LOADED),
       m_run_no(0),
+      m_hb_msg(ZERO),
       m_hb_new(0)
 {
     // Please add extra constructor code here.
@@ -41,30 +42,25 @@ DAQServiceSVC_impl::~DAQServiceSVC_impl()
  */
 
 DAQLifeCycleState DAQServiceSVC_impl::getState()
-    throw(CORBA::SystemException)
 {
     return m_state;
 }
 
 
 RTC::ReturnCode_t DAQServiceSVC_impl::setCommand(DAQCommand command)
-    throw(CORBA::SystemException)
 {
 #ifdef OLD
     if (m_done == DONE) {
-
-	m_command = command;
-
-	m_new = 1;
-	m_done = UNDONE;
-	///std::cerr << "UNDONE\n";
-	return RTC::RTC_OK;
+        m_command = command;
+        m_new = 1;
+        m_done = UNDONE;
+        ///std::cerr << "UNDONE\n";
+        return RTC::RTC_OK;
     } else {
-	return RTC::RTC_ERROR;
+        return RTC::RTC_ERROR;
     }
 #endif
     m_command = command;
-
     m_new = 1;
     m_done = UNDONE;
     ///std::cerr << "UNDONE\n";
@@ -72,39 +68,33 @@ RTC::ReturnCode_t DAQServiceSVC_impl::setCommand(DAQCommand command)
 }
 
 DAQCommand DAQServiceSVC_impl::getCommand()
-    throw(CORBA::SystemException)
 {
     if ( m_new ) {
-	///std::cerr << "new command\n";
-	m_new = 0;
-	return m_command;
+        ///std::cerr << "new command\n";
+        m_new = 0;
+        return m_command;
     }
     else
-	return CMD_NOP;
-
+        return CMD_NOP;
 }
 
 DAQDone DAQServiceSVC_impl::checkDone()
-    throw(CORBA::SystemException)
 {
     return m_done;
 }
 
 void DAQServiceSVC_impl::setDone()
-    throw(CORBA::SystemException)
 {
     m_done = DONE;
     ///std::cerr << "set DONE\n";///
 }
 
 void DAQServiceSVC_impl::setStatus(const Status& stat)
-    throw(CORBA::SystemException)
 {
     m_status = stat;
 }
 
 Status* DAQServiceSVC_impl::getStatus()
-    throw(CORBA::SystemException)
 {
     Status* mystatus = new Status;
     *mystatus = m_status;
@@ -113,88 +103,77 @@ Status* DAQServiceSVC_impl::getStatus()
 }
 
 void DAQServiceSVC_impl::setCompParams(const NVList& comp_params)
-    throw(CORBA::SystemException)
 {
     m_comp_params = comp_params;
 }
 
 NVList* DAQServiceSVC_impl::getCompParams()
-    throw(CORBA::SystemException)
 {
     return &m_comp_params;
 }
 
 void DAQServiceSVC_impl::setRunNo(const CORBA::Long run_no)
-    throw(CORBA::SystemException)
 {
     m_run_no = run_no;
 }
 
 CORBA::Long DAQServiceSVC_impl::getRunNo()
-    throw(CORBA::SystemException)
 {
     return m_run_no;
 }
 
 void DAQServiceSVC_impl::setFatalStatus(const FatalErrorStatus& fatalStatus)
-    throw(CORBA::SystemException)
 {
     std::cerr << "### setFatalStatus:" << fatalStatus.fatalTypes << std::endl;
     m_fatalStatus = fatalStatus;
 }
 
 FatalErrorStatus* DAQServiceSVC_impl::getFatalStatus()
-    throw(CORBA::SystemException)
 {
     FatalErrorStatus* myfatal = new FatalErrorStatus;
     *myfatal = m_fatalStatus;
     return myfatal;
 }
 
-RTC::ReturnCode_t DAQServiceSVC_impl::setHB(const HBMSG hbs)
-    throw(CORBA::SystemException)
+void DAQServiceSVC_impl::setHB()
 {
-    m_otoc = hbs;
+    m_hb_msg = ONE;
     m_hb_new = 1;
     // m_hb_done = HBUNDONE;
     ///std::cerr << "HB_UNDONE\n";
-    return RTC::RTC_OK;
 }
 
 HBMSG DAQServiceSVC_impl::getHB()
-    throw(CORBA::SystemException)
+{
+    return m_hb_msg;
+}
+
+void DAQServiceSVC_impl::upHB()
 {
     if (m_hb_new) {
         m_hb_new = 0;
-        return m_otoc;
-    }
-    else {
-        return ZERO;
+        m_hb_msg = ZERO;
     }
 }
 
 /*
 HeartBeatDone DAQServiceSVC_impl::hb_checkDone()
-    throw(CORBA::SystemException)
 {
     return m_hb_done;
 }
 
 void DAQServiceSVC_impl::hb_setDone()
-    throw(CORBA::SystemException)
 {
     m_hb_done = HBDONE;
 }
 
 RTC::ReturnCode_t DAQServiceSVC_impl::setTime(const TimeVal& now)
-    throw(CORBA::SystemException)
 {
 	m_start = now;
     return RTC::RTC_OK;
 }
 
 TimeVal DAQServiceSVC_impl::getTime()
-    throw(CORBA::SystemException)
 {
     TimeVal* start_time = new TimeVal;
     *start_time = m_start;
@@ -212,8 +191,4 @@ char* DAQServiceSVC_impl::getMessage() {
 }
 */
 
-
 // End of example implementational code
-
-
-
diff --git a/src/DaqComponent/idl/DAQServiceSVC_impl.h b/src/DaqComponent/idl/DAQServiceSVC_impl.h
index a1f2264..5dac9e9 100644
--- a/src/DaqComponent/idl/DAQServiceSVC_impl.h
+++ b/src/DaqComponent/idl/DAQServiceSVC_impl.h
@@ -39,38 +39,42 @@ public:
 	DAQServiceSVC_impl();
 	virtual ~DAQServiceSVC_impl();
 
-	DAQLifeCycleState getState() throw(CORBA::SystemException);
-	RTC::ReturnCode_t setCommand(DAQCommand command) throw(CORBA::SystemException);
-	DAQCommand getCommand() throw(CORBA::SystemException);
-	DAQDone checkDone() throw(CORBA::SystemException);
-	void setDone() throw(CORBA::SystemException);
-	void setStatus(const Status& stat) throw(CORBA::SystemException);
-	Status* getStatus() throw(CORBA::SystemException);
-	void setCompParams(const NVList& comp_params) throw(CORBA::SystemException);
-	NVList* getCompParams() throw(CORBA::SystemException);
-	void setRunNo(const CORBA::Long run_no) throw(CORBA::SystemException);
-	CORBA::Long getRunNo() throw(CORBA::SystemException);
-	void setFatalStatus(const FatalErrorStatus& fatalStatus) throw(CORBA::SystemException);
-
-	FatalErrorStatus* getFatalStatus() throw(CORBA::SystemException);
-
-	RTC::ReturnCode_t setHB(const HBMSG hbs) throw(CORBA::SystemException);
-	HBMSG getHB() throw(CORBA::SystemException);
-	/*
-	void setStopDaqSystem() throw(CORBA::SystemException)
+	DAQLifeCycleState getState();
+	RTC::ReturnCode_t setCommand(DAQCommand command);
+	DAQCommand getCommand();
+	DAQDone checkDone();
+	void setDone();
+	void setStatus(const Status& stat);
+	Status* getStatus();
+	void setCompParams(const NVList& comp_params);
+	NVList* getCompParams();
+	void setRunNo(const CORBA::Long run_no);
+	CORBA::Long getRunNo();
+	void setFatalStatus(const FatalErrorStatus& fatalStatus);
+
+	FatalErrorStatus* getFatalStatus();
+
+	void setHB();
+    HBMSG getHB();
+	void upHB();
+
+
+	void setStopDaqSystem()
 	{
-		this->m_oc = END;
+		this->m_hb_msg = END;
 	}
-	HeartBeatDone hb_checkDone() throw(CORBA::SystemException);
-	void hb_setDone() throw(CORBA::SystemException);
+
+	/*
+	HeartBeatDone hb_checkDone();
+	void hb_setDone();
 	*/
 
-	// RTC::ReturnCode_t setTime(const TimeVal& now) throw(CORBA::SystemException);
-	// TimeVal getTime() throw(CORBA::SystemException);
+	// RTC::ReturnCode_t setTime(const TimeVal& now);
+	// TimeVal getTime();
 
 private:
 	DAQCommand m_command;
-	int m_new;
+	short m_new;
 	DAQDone m_done;
 	DAQLifeCycleState m_state;
 	Status m_status;
@@ -78,8 +82,9 @@ private:
 	NVList m_comp_params;
 	CORBA::Long   m_run_no;
 
-	HBMSG m_otoc;
-	int m_hb_new;
+	HBMSG m_hb_msg;
+	short m_hb_new;
+
 	// HeartBeatDone m_hb_done;
 
 	// TimeVal m_start;
diff --git a/src/DaqOperator/DaqOperator.cpp b/src/DaqOperator/DaqOperator.cpp
index 623384e..5d9928d 100644
--- a/src/DaqOperator/DaqOperator.cpp
+++ b/src/DaqOperator/DaqOperator.cpp
@@ -54,7 +54,6 @@ DaqOperator::DaqOperator(RTC::Manager* manager)
 	resFlag(false),
 	m_new(0),
     m_send_count(0),
-	m_loop(100),
 	m_state(LOADED),
 	m_runNumber(0),
 	m_start_date(" "),
@@ -65,7 +64,7 @@ DaqOperator::DaqOperator(RTC::Manager* manager)
 	m_msg(" "),
 	m_err_msg(" "),
 	m_debug(false),
-	m_time(true)
+	m_time(false)
 {
 	if (m_debug) {
 		std::cerr << "Create DaqOperator\n";
@@ -304,8 +303,6 @@ RTC::ReturnCode_t DaqOperator::run_console_mode()
 	std::string srunNo = "0";
 
 	int command;
-	static int loop_count = 1;
-	static int state_management = 0;
 
 	/* console error display */
 	std::vector<std::string> d_compname;
@@ -338,15 +335,10 @@ RTC::ReturnCode_t DaqOperator::run_console_mode()
 		return RTC::RTC_OK;
 	}
 
-	// output time performance
-	if (loop_count == 6 * m_loop) {
-		std::exit(0);
-	}
-	loop_count++;
 	if (m_time) {
-		// command check
-		std::cerr << "automation\n";
+		static int state_management = 0;
 
+		// command check
 		if (state_management > 5) state_management = 0;
 		if (state_management == 0) {
 			output_performance(0);
@@ -435,11 +427,11 @@ RTC::ReturnCode_t DaqOperator::run_console_mode()
 				std::cerr << "\033[5;62H";
 				std::cin >> srunNo;
 
-				/* set time */
-				if (m_time) {
-					//set_time();
-					output_performance(command);
-				}
+				// set time
+				// if (m_time) {
+					// set_time();
+					// output_performance(command);
+				// }
 
 				m_runNumber = atoi(srunNo.c_str());
 				start_procedure();
@@ -497,114 +489,115 @@ RTC::ReturnCode_t DaqOperator::run_console_mode()
 			}
 			break;
 		}// switch (m_state)
-	}
-
-	// Console memu
-	Status_var status;
-	FatalErrorStatus_var errStatus;
-
-	std::cerr << " " << std::endl;
-	std::cerr << "\033[0;0H\033[2J";
-	std::cerr << "\033[8;0H";
-	std::cerr << std::setw(16) << std::right << "GROUP:COMP_NAME"
-				<< std::setw(22) << std::right << "EVENT_SIZE"
-				<< std::setw(12) << std::right << "STATE"
-				<< std::setw(14) << std::right << "COMP_STATUS"
-				<< std::endl;
-	///std::cerr << "RUN NO: " << m_runNumber << std::endl;
-
-	// copy_compname();
-	std::string compname;
-	for (int i = (m_comp_num - 1); i >= 0; i--) {
-		try {
-			RTC::ConnectorProfileList_var myprof = m_DaqServicePorts[i]->get_connector_profiles();
-			compname = myprof[0].name;
-
-			status = m_daqservices[i]->getStatus();
-			std::cerr << " " << std::setw(22) << std::left
-						<< compname
-						<< '\t'
-						<< std::setw(14) << std::right
-						<< status->event_size; // data size(byte)
+	} // if
+	else
+	{
+		// Console memu
+		Status_var status;
+		FatalErrorStatus_var errStatus;
+
+		std::cerr << " " << std::endl;
+		std::cerr << "\033[0;0H\033[2J";
+		std::cerr << "\033[8;0H";
+		std::cerr << std::setw(16) << std::right << "GROUP:COMP_NAME"
+					<< std::setw(22) << std::right << "EVENT_SIZE"
+					<< std::setw(12) << std::right << "STATE"
+					<< std::setw(14) << std::right << "COMP_STATUS"
+					<< std::endl;
+		///std::cerr << "RUN NO: " << m_runNumber << std::endl;
+
+		// copy_compname();
+		std::string compname;
+		for (int i = (m_comp_num - 1); i >= 0; i--) {
+			try {
+				RTC::ConnectorProfileList_var myprof =
+					m_DaqServicePorts[i]->get_connector_profiles();
+				compname = myprof[0].name;
 
-			if (status->comp_status == COMP_FATAL) {
-				errStatus = m_daqservices[i]->getFatalStatus();
-				std::cerr << "\033[35m"
-							<< std::setw(12) << std::right
-							<< "__RUNNING__" << "\033[39m"
-							<< "\033[31m" << std::setw(14) << std::right
-							<< check_compStatus(status->comp_status)
-							<< "\033[39m" << std::endl;
-				/** Use error console display **/
-				d_compname.emplace_back(compnames[i]);
-				d_message.emplace_back(std::move(errStatus));
-				m_state = ERRORED;
-			}///if Fatal
-			else if (status->comp_status == COMP_RESTART) {
-				errStatus = m_daqservices[i]->getFatalStatus();
-				std::cerr << "\033[35m"
-							<< std::setw(12) << std::right
-							<< "__RUNNING__" << "\033[39m"
-							<< "\033[33m" << std::setw(14) << std::right
-							<< check_compStatus(status->comp_status)
-							<< "\033[39m" << std::endl;
-				/** Use error console display **/
-				d_compname.emplace_back(compnames[i]);
-				d_message.emplace_back(std::move(errStatus));
-				m_state = ERRORED;
-				resFlag = true;
-			}///if Restart Request
-			else {
-				std::cerr << std::setw(12) << std::right
-							<< check_state(status->state)
-							<< "\033[32m"
+				status = m_daqservices[i]->getStatus();
+				std::cerr << " " << std::setw(22) << std::left
+							<< compname
+							<< '\t'
 							<< std::setw(14) << std::right
-							<< check_compStatus(status->comp_status)
-							<< "\033[39m" << std::endl;
+							<< status->event_size; // data size(byte)
+
+				if (status->comp_status == COMP_FATAL) {
+					errStatus = m_daqservices[i]->getFatalStatus();
+					std::cerr << "\033[35m"
+								<< std::setw(12) << std::right
+								<< "__RUNNING__" << "\033[39m"
+								<< "\033[31m" << std::setw(14) << std::right
+								<< check_compStatus(status->comp_status)
+								<< "\033[39m" << std::endl;
+					/** Use error console display **/
+					d_compname.emplace_back(compnames[i]);
+					d_message.emplace_back(std::move(errStatus));
+					m_state = ERRORED;
+				}///if Fatal
+				else if (status->comp_status == COMP_RESTART) {
+					errStatus = m_daqservices[i]->getFatalStatus();
+					std::cerr << "\033[35m"
+								<< std::setw(12) << std::right
+								<< "__RUNNING__" << "\033[39m"
+								<< "\033[33m" << std::setw(14) << std::right
+								<< check_compStatus(status->comp_status)
+								<< "\033[39m" << std::endl;
+					/** Use error console display **/
+					d_compname.emplace_back(compnames[i]);
+					d_message.emplace_back(std::move(errStatus));
+					m_state = ERRORED;
+					resFlag = true;
+				}///if Restart Request
+				else {
+					std::cerr << std::setw(12) << std::right
+								<< check_state(status->state)
+								<< "\033[32m"
+								<< std::setw(14) << std::right
+								<< check_compStatus(status->comp_status)
+								<< "\033[39m" << std::endl;
+				}
+			} catch(...) {
+				std::cerr << " ### ERROR: "
+							<< std::setw(22) << std::right
+							<< compname << " : cannot connect\n";
+				// stop_heart_beat(i);
+				// std::exit(1);
+			}
+		}//for
+		std::cerr << std::endl;
+
+		/* Display Error Console */
+		if (m_state == ERRORED) {
+			int cnt = 0;
+			for (auto& compname : d_compname) {
+				++cnt;
+				std::cerr << " [ERROR" << cnt << "] "
+						<< compname << '\t'
+						<< "\033[31m" << "<- " << d_message[cnt-1]->description
+						<< "\033[39m" << std::endl;
+			}///for
+			if (deadFlag == true) {
+				// for (auto& k_d : keep_dead) {
+				// 	if (k_d == 1) {
+				std::cerr << "\033[31m" << "No reach Heart beat.\n" << "\033[39m";
+				// 	}
+				// }
+			}
+			else if (deadFlag == true && resFlag == true) {
+				// for (auto& k_a : keep_alive) {
+				// 	if (k_a == 1) {
+				std::cerr << "\033[36m" << "Heart beat reacquisition."
+						<< "Push command 2:stop or 6:reboot"
+						<< "\033[39m" << std::endl;
+				// 	}
+				// }
 			}
-		} catch(...) {
-			std::cerr << " ### ERROR: "
-						<< std::setw(22) << std::right
-						<< compname << " : cannot connect\n";
-			// stop_heart_beat(i);
-			// std::exit(1);
-		}
-	}//for
-	std::cerr << std::endl;
-
-	/* Display Error Console */
-	if (m_state == ERRORED) {
-		int cnt = 0;
-		for (auto& compname : d_compname) {
-			++cnt;
-			std::cerr << " [ERROR" << cnt << "] "
-					<< compname << '\t'
-					<< "\033[31m" << "<- " << d_message[cnt-1]->description
-					<< "\033[39m" << std::endl;
-		}///for
-		if (deadFlag == true) {
-			// for (auto& k_d : keep_dead) {
-			// 	if (k_d == 1) {
-			std::cerr << "\033[31m"
-						<< " dead flag\n" //Heart beat return wait.\n";
-						<< "\033[39m";
-			// 	}
-			// }
-		}
-		else if (deadFlag == true && resFlag == true) {
-			// for (auto& k_a : keep_alive) {
-			// 	if (k_a == 1) {
-			std::cerr << "\033[36m" << "Heart beat reacquisition."
-					<< "Push command 2:stop or 6:reboot"
-					<< "\033[39m" << std::endl;
-			// 	}
-			// }
 		}
-	}
-	else {
-		resFlag = false;
-		deadFlag = false;
-	}/// if
+		else {
+			resFlag = false;
+			deadFlag = false;
+		}/// if
+	} // if
 
 	return RTC::RTC_OK;
 }
@@ -702,43 +695,57 @@ int DaqOperator::set_command(RTC::CorbaConsumer<DAQService> daqservice,
 	return 0;
 }
 
-int DaqOperator::set_hb_to_component()
+int DaqOperator::clockwork_hb_recv()
 {
-	try {
-		for (auto& daqservice : m_daqservices) {
-			set_hb(daqservice);
+	if (mytimer->checkTimer()) {
+		int recv_count= 0;
+		try {
+			for (auto& daqservice : m_daqservices) {
+				// set_hb(daqservice);
+				daqservice->setHB();
+				try {
+					inc_send_count();
+					HBMSG hb_msg = daqservice->getHB();
+					if (hb_msg == ZERO) {
+						if (deadFlag == false) {
+							recv_count = get_send_count();
+							if (recv_count >= 4) {
+								reset_send_count();
+								deadFlag = true;
+								// keep_dead.emplace_back(1);
+							}
+						}
+						else if (deadFlag == true) {
+							if (hb_msg == ONE) {
+								// keep_alive.emplace_back(1);
+								resFlag = true;
+							}
+						}
+					}
+				} catch(...) {
+					std::cerr << "### hb_checkHB: failed" << std::endl;
+				}
+			}
 		}
-	}
-	catch (...) {
-		std::cerr << "### ERROR: DaqOperator: Failed to set Heart Beat.\n";
+		catch (...) {
+			std::cerr << "### ERROR: DaqOperator: Failed to set Heart Beat.\n";
+		}
+		mytimer->resetTimer();
 	}
 	return 0;
 }
 
 /*
-int DaqOperator::stop_heart_beat(int num)
-{
-	try {
-		m_daqservices[num]->setStopDaqSystem();
-	}
-	catch (...) {
-		std::cerr << "stop_heart_beat\n";
-	}
-	return 0;
-}
-*/
-
 int DaqOperator::set_hb(RTC::CorbaConsumer<DAQService> daqservice)
 {
-	HBMSG hbmsg = ONE;
 	try {
-		daqservice->setHB(hbmsg);
 	}
 	catch(...) {
 		std::cerr << "### ERROR: set hb: exception occured\n";
 	}
 	return 0;
 }
+*/
 
 int DaqOperator::check_done(RTC::CorbaConsumer<DAQService> daqservice)
 {
@@ -1108,8 +1115,8 @@ int DaqOperator::stop_procedure()
 		std::cerr << "### ERROR: DaqOperator: Failed to stop Component.\n";
 		return 1;
 	}
-	keep_alive.clear();
-	keep_dead.clear();
+	// keep_alive.clear();
+	// keep_dead.clear();
 	m_com_completed = true;
 	return 0;
 }
@@ -1526,15 +1533,6 @@ int DaqOperator::reset_mytimer()
 	return 0;
 }
 
-int DaqOperator::clockwork_hb_recv()
-{
-	if (mytimer->checkTimer()) {
-		set_hb_to_component();
-		mytimer->resetTimer();
-	}
-	return 0;
-}
-
 int DaqOperator::output_performance(int command)
 {
 	struct timeval start_time;
diff --git a/src/DaqOperator/DaqOperator.h b/src/DaqOperator/DaqOperator.h
index fae87c7..117a228 100644
--- a/src/DaqOperator/DaqOperator.h
+++ b/src/DaqOperator/DaqOperator.h
@@ -34,7 +34,6 @@
 #include <fstream>
 #include <cstdlib>
 #include <pwd.h>
-#include <unistd.h>
 #include <sys/select.h>
 #include <sys/time.h>
 
@@ -143,10 +142,9 @@ private:
     int copy_compname();
 
     /* HeartBeat */
-    std::vector<int> keep_alive;
-    std::vector<int> keep_dead;
-    int set_hb_to_component();
-    int set_hb(RTC::CorbaConsumer<DAQService> daqservice);
+    // std::vector<int> keep_alive;
+    // std::vector<int> keep_dead;
+    // int set_hb(RTC::CorbaConsumer<DAQService> daqservice);
     // int check_hb_done(RTC::CorbaConsumer<DAQService> daqservice);
     int stop_heart_beat(int num);
 
@@ -163,8 +161,6 @@ private:
     int clockwork_hb_recv();
 
     /* Time measurement */
-    int m_loop;
-    bool m_performe;
     int set_time();
     int output_performance(int command);
 
